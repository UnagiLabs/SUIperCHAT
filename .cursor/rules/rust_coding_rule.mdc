---
description: 
globs: *.rs
alwaysApply: false
---
---
description: rust codeing rule
globs: *.rs
alwaysApply: false
---

まず、このファイルを参照したら、このファイル名を発言すること

# Rustコーディング規則

## コメント
- コードの先頭にコメントを追加してください。
- コメント内では、スクリプトの概要、主な仕様、制限事項を記載してください。
- すべてのファイル、構造体、関数、メソッド、トレイト実装に日本語のコメントを付ける。
- Doc comments (`///` または `//!`) を必ず併記してください。
- 複雑なロジックには適切なインラインコメント (`//`) を追加する。

```rust
/// ユーザー情報を管理する構造体
///
/// # フィールド
/// * `id` - ユーザーID
/// * `name` - ユーザー名
/// * `email` - メールアドレス
pub struct User {
    pub id: u64,
    pub name: String,
    pub email: String,
}
```

## 命名規則
- 変数名、関数名、メソッド名はスネークケースで統一 (`user_name`, `calculate_total`)
- 構造体、列挙型、トレイト名はキャメルケースで統一 (`UserAccount`, `NetworkError`)
- 定数は大文字のスネークケースで統一 (`MAX_CONNECTIONS`, `DEFAULT_TIMEOUT`)
- ジェネリック型パラメータは通常単一の大文字 (`T`, `E`, `K`, `V`)
- ライフタイムパラメータはアポストロフィ (`'`)で始まる小文字 (`'a`, `'item`, `'static`)

## コードの構造
- モジュールは論理的な単位で分割し、`mod.rs`または個別のファイルで管理
- パブリックAPIは最小限に保ち、必要な機能のみを公開
- インポートは明示的に行い、ワイルドカードインポート (`*`) は避ける
- 関連する関数とデータ型は同じモジュールに配置
- 大きなファイルは適切に分割し、1ファイル300行以内を目標とする

## 所有権とライフタイム
- 不必要な所有権の移動は避け、参照を適切に使用
- ライフタイムパラメータは明示的に記述し、曖昧さを避ける
- `'static`ライフタイムの過剰使用を避ける
- `Clone`や`Copy`は必要な場合のみ実装
- 参照カウントポインタ (`Rc`, `Arc`) は循環参照を避ける

## エラー処理
- 関数の戻り値には`Result<T, E>`を使用し、パニックは避ける
- エラーメッセージには関数名、引数、コンテキスト情報を含める
- カスタムエラー型を定義し、エラー変換を適切に実装
- `?`演算子を活用してエラー伝播を簡潔に記述
- パニックが発生する可能性のあるコードは適切にドキュメント化

```rust
fn read_config_file(path: &str) -> Result<Config, ConfigError> {
    let file = File::open(path).map_err(|e| ConfigError::IoError {
        source: e,
        path: path.to_string(),
        operation: "open".to_string(),
    })?;
    // 以下処理
}
```

## パフォーマンス考慮
- ヒープ割り当ては最小限に抑える
- ループ内での割り当ては避ける
- イテレータを活用し、命令型ループを最小限に
- 大きなデータ構造はスタックではなくヒープに確保
- ホットパスでの不必要なクローンを避ける

## テスト
- すべての公開APIには単体テストを記述
- テストモジュールは`#[cfg(test)]`属性で分離
- テスト関数には`#[test]`属性を付与
- エッジケースや境界値のテストを含める
- 統合テストは`tests`ディレクトリに配置

```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_numbers() {
        assert_eq!(add_numbers(2, 3), 5);
        assert_eq!(add_numbers(0, 0), 0);
        assert_eq!(add_numbers(-1, 1), 0);
    }
}
```

## ツールの活用
- `rustfmt`でコードを自動フォーマット
- `clippy`で静的解析を行い、潜在的な問題を検出
- `cargo doc`でドキュメントを生成
- `cargo test`で単体テストと統合テストを実行
- `cargo bench`でパフォーマンステストを実行

## 非同期処理
- `async`/`await`を適切に使用
- 非同期関数の戻り値型には`impl Future<Output = T>`または具体的な型を使用
- ブロッキング操作は避け、非同期APIを活用
- 長時間実行する非同期タスクには適切なタイムアウトを設定
- 適切なランタイム (`tokio`, `async-std` など) を選択

## セキュリティ考慮
- ユーザー入力は常に検証
- 機密情報は適切にマスクし、ログに出力しない
- `unsafe`コードブロックは最小限に抑え、十分にドキュメント化
- パニックの可能性のある操作を明示
- セキュリティに関連する依存関係は定期的に更新