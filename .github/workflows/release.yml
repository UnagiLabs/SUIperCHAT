name: Release

on:
  push:
    tags:
      - 'v*'        # v1.0.0 などタグを押したら実行

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            args: ''                       # Windows x64
          - os: macos-latest
            args: ''                       # macOS (Intel/Apple 両対応は自動検出)

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write                      # Release 作成権限

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # フロントエンド依存をサブフォルダでインストール
      - name: Install frontend deps
        run: npm ci --prefix suiperchat_streamer_app

      - name: Verify Admin Rights
        if: matrix.os == 'windows-latest'
        run: |
          if (-not ([bool](New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {
            Write-Host "Admin rights are required for this step."
            exit 1
          }
        shell: pwsh

      - name: Check for Pending Reboot
        if: matrix.os == 'windows-latest'
        run: |
          $pendingReboot = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired' -ErrorAction SilentlyContinue
          if ($pendingReboot) {
            Write-Host "Pending reboot detected. Please reboot the runner."
            exit 1
          }
        shell: pwsh

      - name: Uninstall Existing StrawberryPerl
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "C:\ProgramData\chocolatey\lib\StrawberryPerl") {
            Remove-Item -Recurse -Force "C:\ProgramData\chocolatey\lib\StrawberryPerl"
          }
          if (Test-Path "C:\Program Files\Strawberry") {
            Remove-Item -Recurse -Force "C:\Program Files\Strawberry"
          }
        shell: pwsh

      - name: Retry Installation of StrawberryPerl
        if: matrix.os == 'windows-latest'
        run: |
          for ($i = 1; $i -le 3; $i++) {
            choco install strawberryperl --yes
            if ($LASTEXITCODE -eq 0) {
              Write-Host "StrawberryPerl installation succeeded."
              break
            }
            Write-Host "Retrying installation... Attempt $i"
            Start-Sleep -Seconds 10
          }
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to install StrawberryPerl after 3 attempts."
            exit 1
          }
        shell: pwsh

      - name: Enable Chocolatey Debug Logs
        if: matrix.os == 'windows-latest'
        run: choco feature enable -n=logEnvironmentValues || echo "Failed to enable logs"
        shell: bash

      - name: Update Chocolatey
        if: matrix.os == 'windows-latest'
        run: |
          choco upgrade chocolatey -y
          choco upgrade all -y

      - name: Install WinPcap/NPcap
        if: matrix.os == 'windows-latest'
        run: |
          choco install npcap -y --ignore-checksums || (
            echo "NPCAP installation failed. Check logs at C:\\ProgramData\\chocolatey\\logs\\chocolatey.log" &&
            exit 1
          )

      - name: Debug Chocolatey Logs
        if: matrix.os == 'windows-latest' && failure()
        run: |
          type C:\\ProgramData\\chocolatey\\logs\\chocolatey.log

      # ★ tauri-action ★
      - uses: tauri-apps/tauri-action@v0        # ← v0 系を指定
        with:
          projectPath: suiperchat_streamer_app  # ← Tauri プロジェクトの場所
          tagName: ${{ github.ref_name }}       # 例: v1.0.0
          releaseDraft: false                   # 直接公開
          releaseName: ${{ github.ref_name }}   # リリース名を明示的に設定
          includeUpdaterJson: true              # latest.json を自動生成
          args: ${{ matrix.args }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}